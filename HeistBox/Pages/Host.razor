@using Microsoft.AspNetCore.SignalR.Client
@using HeistBox.Data
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Host</PageTitle>


@if (CurrentGame == null)
{
    //Starting page
    <h1>Game is loading</h1>
    <button @onclick="CreateGame">Create</button>
}
else if (CurrentGame.gameState == GameState.Lobby)
{
    //Player joining
    <h1>Setup your crew!</h1>
    <h2>Room code: @CurrentGame.id</h2>
    <button @onclick="StartGame">Start game</button>
    <h2>All heisters:</h2>
    <ul>
        @foreach (PlayerData u in CurrentGame.players)
        {
            <li>@u.Name</li>
        }
    </ul>
}
else if (CurrentGame.gameState == GameState.AnswerSubmission)
{
    //Answer Submission
    //Get voice playing once setup
    <h1>Attention Heisters</h1>
    <h2>Today you've been hired to rob...</h2>
    <h1>@CurrentGame.heistLocation</h1>
    <h2>One problem...</h2>
    <h2>You are independent contracts with no contact with each other.</h2>
    <h2>Please bring your best ideas. Submit them on your devices.</h2>
    <CountdownTimer OnTimerEnded="EndAnswerSubmission"></CountdownTimer>

    //Debug
    @* @foreach(Response response in CurrentGame.responses)
    {
        <p>@response.player.Name : @response.answer</p>
    } *@
}
else if (CurrentGame.gameState == GameState.Voting)
{
    //Voting
    <h1>Voting</h1>
    <h1>@GetKeyValuePair().Key</h1>
    foreach(Response response in GetKeyValuePair().Value)
    {
        <p>@response.answer</p>
    }
    <button @onclick="UpdateIndex">Debug Next Answer Button</button>
}



@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    //private string? userInput;
    private string? roomId;
    private GameData? CurrentGame;
    private bool started = false;
    private bool submissionFinished = false;
    private int currentRoleVoteIndex = 0;
    private Dictionary<string, List<Response>> allResponsesDictionary = new Dictionary<string, List<Response>>();

    protected override async Task OnInitializedAsync()
    {
        roomId = GameData.GenerateId();
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .Build();

        hubConnection.On<GameData>("GameCreated", (gameResponse) =>
        {
            if (gameResponse.id.ToLower().Trim() == roomId.ToLower().Trim())
            {
                CurrentGame = gameResponse;
                StateHasChanged();
            }
        });

        hubConnection.On<GameData>("PlayerJoined", (gameResponse) =>
        {
            if(gameResponse.id == CurrentGame.id)
            {
                CurrentGame = gameResponse;
                StateHasChanged();
            }
        });

        hubConnection.On<GameData>("PlayerLeft", (gameResponse) =>
        {
            if (gameResponse.id == CurrentGame.id)
            {
                CurrentGame = gameResponse;
                StateHasChanged();
            }
        });

        hubConnection.On<GameData>("GameStarted", (gameResponse) =>
        {
            if (gameResponse.id == CurrentGame.id)
            {
                CurrentGame = gameResponse;
                StateHasChanged();
            }
        });

        hubConnection.On<GameData>("GotAnswer", (gameResponse) =>
        {
            if (gameResponse.id == CurrentGame.id)
            {
                CurrentGame = gameResponse;
                StateHasChanged();
            }
        });

        hubConnection.On<GameData>("StartVoting", (gameResponse) =>
        {
            if (gameResponse.id == CurrentGame.id)
            {
                CurrentGame = gameResponse;
                submissionFinished = true;
                allResponsesDictionary = GameData.GroupResponsesByRoleName(CurrentGame.responses);
                StateHasChanged();
            }
        });



        await hubConnection.StartAsync();
    }

    private KeyValuePair<string, List<Response>> GetKeyValuePair()
    {
        return allResponsesDictionary.ToList()[currentRoleVoteIndex];
    }

    private void UpdateIndex()
    {
        currentRoleVoteIndex++;
    }

    private async Task CreateGame()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("CreateGame", roomId);
        }
    }

    private async Task StartGame()
    {
        if (hubConnection is not null)
        {
            started = true;
            await hubConnection.SendAsync("StartGame", roomId);
        }
    }

    private async Task EndAnswerSubmission()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("EndAnswerSubmission", roomId);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}