@using Microsoft.AspNetCore.SignalR.Client
@using HeistBox.Data
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Host</PageTitle>
<CountdownTimer></CountdownTimer>

@if(CurrentGame == null)
{
    <h1>Game is loading</h1>
    <button @onclick="CreateGame">Create</button>
}
else if (CurrentGame != null && started == false)
{
    <h1>Setup your crew!</h1>
    <h2>Room code: @CurrentGame.id</h2>
    <button @onclick="StartGame">Start game</button>
    <h2>All heisters:</h2>
    <ul>
        @foreach (PlayerData u in CurrentGame.players)
        {
            <li>@u.Name</li>
        }
    </ul>
}
else if (CurrentGame != null && started == true)
{
    //Get voice playing once setup
    <h1>Attention Heisters</h1>
    <h2>Today you've been hired to rob...</h2>
    <h1>@CurrentGame.heistLocation</h1>
    <h2>One problem...</h2>
    <h2>You are independent contracts with no contact with each other.</h2>
    <h2>Please bring your best ideas. Submit them on your devices.</h2>
}



@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    //private string? userInput;
    private string? roomId;
    private GameData? CurrentGame;
    private bool started = false;

    protected override async Task OnInitializedAsync()
    {
        roomId = GameData.GenerateId();
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .Build();

        hubConnection.On<GameData>("GameCreated", (gameResponse) =>
        {
            if (gameResponse.id.ToLower().Trim() == roomId.ToLower().Trim())
            {
                CurrentGame = gameResponse;
                StateHasChanged();
            }
        });

        hubConnection.On<GameData>("PlayerJoined", (gameResponse) =>
        {
            if(gameResponse.id == CurrentGame.id)
            {
                CurrentGame = gameResponse;
                StateHasChanged();
            }
        });

        hubConnection.On<GameData>("PlayerLeft", (gameResponse) =>
        {
            if (gameResponse.id == CurrentGame.id)
            {
                CurrentGame = gameResponse;
                StateHasChanged();
            }
        });

        await hubConnection.StartAsync();
    }

    private async Task CreateGame()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("CreateGame", roomId);
        }
    }

    private async Task StartGame()
    {
        if (hubConnection is not null)
        {
            started = true;
            await hubConnection.SendAsync("StartGame", roomId);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}