@using System.Timers

<h3>Countdown Timer</h3>

<p>Time remaining: @timeRemaining.ToString(@"mm\:ss")</p>

@code {
    private TimeSpan timeRemaining;
    private Timer timer;
    [Parameter] public EventCallback OnTimerEnded { get; set; } // Output parameter

    protected override void OnInitialized()
    {
        timeRemaining = TimeSpan.FromMinutes(0.1); // Set initial time (e.g., 5 minutes)
        timer = new Timer(1000); // Timer ticks every second
        timer.Elapsed += TimerElapsed;
        timer.Start();
    }

    private void TimerElapsed(object sender, ElapsedEventArgs e)
    {
        InvokeAsync(async () =>
        {
            if (timeRemaining.TotalSeconds > 0)
            {
                timeRemaining = timeRemaining.Subtract(TimeSpan.FromSeconds(1));
                StateHasChanged(); // Safe because it's inside InvokeAsync
            }
            else
            {
                timer.Stop();
                await OnTimerEnded.InvokeAsync(); // Safe execution of the event callback
            }
        });
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}

